// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sled.proto

/*
Package sled is a generated protocol buffer package.

It is generated from these files:
	sled.proto

It has these top-level messages:
	WipeRequest
	WipeResponse
	WriteRequest
	WriteResponse
	KexecRequest
	KexecResponse
	CommandRequest
	UpdateResponse
	UpdateRequest
	CommandSet
	PartialCommandSet
	Wipe
	Write
	Kexec
*/
package sled

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type WipeRequest struct {
	Mac string `protobuf:"bytes,1,opt,name=mac" json:"mac,omitempty"`
}

func (m *WipeRequest) Reset()                    { *m = WipeRequest{} }
func (m *WipeRequest) String() string            { return proto.CompactTextString(m) }
func (*WipeRequest) ProtoMessage()               {}
func (*WipeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *WipeRequest) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

type WipeResponse struct {
	Wipe *Wipe `protobuf:"bytes,1,opt,name=wipe" json:"wipe,omitempty"`
}

func (m *WipeResponse) Reset()                    { *m = WipeResponse{} }
func (m *WipeResponse) String() string            { return proto.CompactTextString(m) }
func (*WipeResponse) ProtoMessage()               {}
func (*WipeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *WipeResponse) GetWipe() *Wipe {
	if m != nil {
		return m.Wipe
	}
	return nil
}

type WriteRequest struct {
	Mac string `protobuf:"bytes,1,opt,name=mac" json:"mac,omitempty"`
}

func (m *WriteRequest) Reset()                    { *m = WriteRequest{} }
func (m *WriteRequest) String() string            { return proto.CompactTextString(m) }
func (*WriteRequest) ProtoMessage()               {}
func (*WriteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *WriteRequest) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

type WriteResponse struct {
	Image  string `protobuf:"bytes,1,opt,name=image" json:"image,omitempty"`
	Kernel string `protobuf:"bytes,2,opt,name=kernel" json:"kernel,omitempty"`
	Initrd string `protobuf:"bytes,3,opt,name=initrd" json:"initrd,omitempty"`
}

func (m *WriteResponse) Reset()                    { *m = WriteResponse{} }
func (m *WriteResponse) String() string            { return proto.CompactTextString(m) }
func (*WriteResponse) ProtoMessage()               {}
func (*WriteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *WriteResponse) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *WriteResponse) GetKernel() string {
	if m != nil {
		return m.Kernel
	}
	return ""
}

func (m *WriteResponse) GetInitrd() string {
	if m != nil {
		return m.Initrd
	}
	return ""
}

type KexecRequest struct {
	Mac string `protobuf:"bytes,1,opt,name=mac" json:"mac,omitempty"`
}

func (m *KexecRequest) Reset()                    { *m = KexecRequest{} }
func (m *KexecRequest) String() string            { return proto.CompactTextString(m) }
func (*KexecRequest) ProtoMessage()               {}
func (*KexecRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *KexecRequest) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

type KexecResponse struct {
	Kexec *Kexec `protobuf:"bytes,1,opt,name=kexec" json:"kexec,omitempty"`
}

func (m *KexecResponse) Reset()                    { *m = KexecResponse{} }
func (m *KexecResponse) String() string            { return proto.CompactTextString(m) }
func (*KexecResponse) ProtoMessage()               {}
func (*KexecResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *KexecResponse) GetKexec() *Kexec {
	if m != nil {
		return m.Kexec
	}
	return nil
}

type CommandRequest struct {
	Mac string `protobuf:"bytes,1,opt,name=mac" json:"mac,omitempty"`
}

func (m *CommandRequest) Reset()                    { *m = CommandRequest{} }
func (m *CommandRequest) String() string            { return proto.CompactTextString(m) }
func (*CommandRequest) ProtoMessage()               {}
func (*CommandRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CommandRequest) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

type UpdateResponse struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *UpdateResponse) Reset()                    { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()               {}
func (*UpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *UpdateResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *UpdateResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type UpdateRequest struct {
	Mac        string      `protobuf:"bytes,1,opt,name=mac" json:"mac,omitempty"`
	CommandSet *CommandSet `protobuf:"bytes,2,opt,name=commandSet" json:"commandSet,omitempty"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *UpdateRequest) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *UpdateRequest) GetCommandSet() *CommandSet {
	if m != nil {
		return m.CommandSet
	}
	return nil
}

type CommandSet struct {
	Wipe  *Wipe  `protobuf:"bytes,1,opt,name=wipe" json:"wipe,omitempty"`
	Write *Write `protobuf:"bytes,2,opt,name=write" json:"write,omitempty"`
	Kexec *Kexec `protobuf:"bytes,3,opt,name=kexec" json:"kexec,omitempty"`
}

func (m *CommandSet) Reset()                    { *m = CommandSet{} }
func (m *CommandSet) String() string            { return proto.CompactTextString(m) }
func (*CommandSet) ProtoMessage()               {}
func (*CommandSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CommandSet) GetWipe() *Wipe {
	if m != nil {
		return m.Wipe
	}
	return nil
}

func (m *CommandSet) GetWrite() *Write {
	if m != nil {
		return m.Write
	}
	return nil
}

func (m *CommandSet) GetKexec() *Kexec {
	if m != nil {
		return m.Kexec
	}
	return nil
}

type PartialCommandSet struct {
	Wipe  *Wipe  `protobuf:"bytes,1,opt,name=wipe" json:"wipe,omitempty"`
	Write string `protobuf:"bytes,2,opt,name=write" json:"write,omitempty"`
	Kexec *Kexec `protobuf:"bytes,3,opt,name=kexec" json:"kexec,omitempty"`
}

func (m *PartialCommandSet) Reset()                    { *m = PartialCommandSet{} }
func (m *PartialCommandSet) String() string            { return proto.CompactTextString(m) }
func (*PartialCommandSet) ProtoMessage()               {}
func (*PartialCommandSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *PartialCommandSet) GetWipe() *Wipe {
	if m != nil {
		return m.Wipe
	}
	return nil
}

func (m *PartialCommandSet) GetWrite() string {
	if m != nil {
		return m.Write
	}
	return ""
}

func (m *PartialCommandSet) GetKexec() *Kexec {
	if m != nil {
		return m.Kexec
	}
	return nil
}

type Wipe struct {
	Device string `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
}

func (m *Wipe) Reset()                    { *m = Wipe{} }
func (m *Wipe) String() string            { return proto.CompactTextString(m) }
func (*Wipe) ProtoMessage()               {}
func (*Wipe) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Wipe) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

type Write struct {
	Device     string `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
	ImageName  string `protobuf:"bytes,2,opt,name=imageName" json:"imageName,omitempty"`
	Image      []byte `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	KernelName string `protobuf:"bytes,4,opt,name=kernelName" json:"kernelName,omitempty"`
	Kernel     []byte `protobuf:"bytes,5,opt,name=kernel,proto3" json:"kernel,omitempty"`
	InitrdName string `protobuf:"bytes,6,opt,name=initrdName" json:"initrdName,omitempty"`
	Initrd     []byte `protobuf:"bytes,7,opt,name=initrd,proto3" json:"initrd,omitempty"`
}

func (m *Write) Reset()                    { *m = Write{} }
func (m *Write) String() string            { return proto.CompactTextString(m) }
func (*Write) ProtoMessage()               {}
func (*Write) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Write) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *Write) GetImageName() string {
	if m != nil {
		return m.ImageName
	}
	return ""
}

func (m *Write) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *Write) GetKernelName() string {
	if m != nil {
		return m.KernelName
	}
	return ""
}

func (m *Write) GetKernel() []byte {
	if m != nil {
		return m.Kernel
	}
	return nil
}

func (m *Write) GetInitrdName() string {
	if m != nil {
		return m.InitrdName
	}
	return ""
}

func (m *Write) GetInitrd() []byte {
	if m != nil {
		return m.Initrd
	}
	return nil
}

type Kexec struct {
	Kernel string `protobuf:"bytes,1,opt,name=kernel" json:"kernel,omitempty"`
	Append string `protobuf:"bytes,2,opt,name=append" json:"append,omitempty"`
	Initrd string `protobuf:"bytes,3,opt,name=initrd" json:"initrd,omitempty"`
}

func (m *Kexec) Reset()                    { *m = Kexec{} }
func (m *Kexec) String() string            { return proto.CompactTextString(m) }
func (*Kexec) ProtoMessage()               {}
func (*Kexec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Kexec) GetKernel() string {
	if m != nil {
		return m.Kernel
	}
	return ""
}

func (m *Kexec) GetAppend() string {
	if m != nil {
		return m.Append
	}
	return ""
}

func (m *Kexec) GetInitrd() string {
	if m != nil {
		return m.Initrd
	}
	return ""
}

func init() {
	proto.RegisterType((*WipeRequest)(nil), "WipeRequest")
	proto.RegisterType((*WipeResponse)(nil), "WipeResponse")
	proto.RegisterType((*WriteRequest)(nil), "WriteRequest")
	proto.RegisterType((*WriteResponse)(nil), "WriteResponse")
	proto.RegisterType((*KexecRequest)(nil), "KexecRequest")
	proto.RegisterType((*KexecResponse)(nil), "KexecResponse")
	proto.RegisterType((*CommandRequest)(nil), "CommandRequest")
	proto.RegisterType((*UpdateResponse)(nil), "UpdateResponse")
	proto.RegisterType((*UpdateRequest)(nil), "UpdateRequest")
	proto.RegisterType((*CommandSet)(nil), "CommandSet")
	proto.RegisterType((*PartialCommandSet)(nil), "PartialCommandSet")
	proto.RegisterType((*Wipe)(nil), "Wipe")
	proto.RegisterType((*Write)(nil), "Write")
	proto.RegisterType((*Kexec)(nil), "Kexec")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Sled service

type SledClient interface {
	Command(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*PartialCommandSet, error)
	Wipe(ctx context.Context, in *WipeRequest, opts ...grpc.CallOption) (*WipeResponse, error)
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error)
	Kexec(ctx context.Context, in *KexecRequest, opts ...grpc.CallOption) (*KexecResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
}

type sledClient struct {
	cc *grpc.ClientConn
}

func NewSledClient(cc *grpc.ClientConn) SledClient {
	return &sledClient{cc}
}

func (c *sledClient) Command(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*PartialCommandSet, error) {
	out := new(PartialCommandSet)
	err := grpc.Invoke(ctx, "/Sled/Command", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sledClient) Wipe(ctx context.Context, in *WipeRequest, opts ...grpc.CallOption) (*WipeResponse, error) {
	out := new(WipeResponse)
	err := grpc.Invoke(ctx, "/Sled/Wipe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sledClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := grpc.Invoke(ctx, "/Sled/Write", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sledClient) Kexec(ctx context.Context, in *KexecRequest, opts ...grpc.CallOption) (*KexecResponse, error) {
	out := new(KexecResponse)
	err := grpc.Invoke(ctx, "/Sled/Kexec", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sledClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := grpc.Invoke(ctx, "/Sled/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Sled service

type SledServer interface {
	Command(context.Context, *CommandRequest) (*PartialCommandSet, error)
	Wipe(context.Context, *WipeRequest) (*WipeResponse, error)
	Write(context.Context, *WriteRequest) (*WriteResponse, error)
	Kexec(context.Context, *KexecRequest) (*KexecResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
}

func RegisterSledServer(s *grpc.Server, srv SledServer) {
	s.RegisterService(&_Sled_serviceDesc, srv)
}

func _Sled_Command_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SledServer).Command(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Sled/Command",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SledServer).Command(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sled_Wipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WipeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SledServer).Wipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Sled/Wipe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SledServer).Wipe(ctx, req.(*WipeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sled_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SledServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Sled/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SledServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sled_Kexec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KexecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SledServer).Kexec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Sled/Kexec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SledServer).Kexec(ctx, req.(*KexecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sled_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SledServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Sled/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SledServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sled_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Sled",
	HandlerType: (*SledServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Command",
			Handler:    _Sled_Command_Handler,
		},
		{
			MethodName: "Wipe",
			Handler:    _Sled_Wipe_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _Sled_Write_Handler,
		},
		{
			MethodName: "Kexec",
			Handler:    _Sled_Kexec_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Sled_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sled.proto",
}

func init() { proto.RegisterFile("sled.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 475 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xdb, 0x6e, 0xd3, 0x40,
	0x10, 0x95, 0x49, 0xec, 0x90, 0x93, 0xd8, 0x85, 0x55, 0x85, 0x82, 0x55, 0x85, 0xca, 0x48, 0x15,
	0x15, 0x62, 0x1f, 0xc2, 0x27, 0x94, 0x37, 0xa4, 0x82, 0x52, 0x55, 0x7d, 0x76, 0xed, 0x11, 0x5a,
	0x35, 0x76, 0x8c, 0xd7, 0xa5, 0xfc, 0x1f, 0xff, 0xc0, 0xf7, 0xa0, 0xbd, 0xe1, 0x35, 0xd4, 0x55,
	0xde, 0x3c, 0x67, 0x6e, 0x9e, 0x99, 0x73, 0x16, 0x90, 0x3b, 0x2a, 0x79, 0xd3, 0xee, 0xbb, 0x7d,
	0xf6, 0x06, 0x8b, 0x1b, 0xd1, 0xd0, 0x96, 0xbe, 0xdf, 0x93, 0xec, 0xd8, 0x0b, 0x4c, 0xaa, 0xbc,
	0x58, 0x05, 0xa7, 0xc1, 0xbb, 0xf9, 0x56, 0x7d, 0x66, 0xe7, 0x58, 0x9a, 0x00, 0xd9, 0xec, 0x6b,
	0x49, 0xec, 0x35, 0xa6, 0x0f, 0xa2, 0x21, 0x1d, 0xb2, 0xd8, 0x84, 0x5c, 0x3b, 0x35, 0x94, 0x9d,
	0x62, 0x79, 0xd3, 0x8a, 0xee, 0x89, 0x62, 0xd7, 0x88, 0x6d, 0x84, 0xad, 0x76, 0x8c, 0x50, 0x54,
	0xf9, 0x37, 0xb2, 0x41, 0xc6, 0x60, 0xaf, 0x10, 0xdd, 0x51, 0x5b, 0xd3, 0x6e, 0xf5, 0x4c, 0xc3,
	0xd6, 0x52, 0xb8, 0xa8, 0x45, 0xd7, 0x96, 0xab, 0x89, 0xc1, 0x8d, 0xa5, 0x1a, 0x7f, 0xa6, 0x9f,
	0x54, 0x8c, 0x37, 0xfe, 0x80, 0xd8, 0x46, 0xd8, 0xc6, 0x27, 0x08, 0xef, 0x14, 0x60, 0xe7, 0x88,
	0xb8, 0x71, 0x1b, 0x30, 0xcb, 0x90, 0x5c, 0xec, 0xab, 0x2a, 0xaf, 0xcb, 0xf1, 0x92, 0x9f, 0x90,
	0x5c, 0x37, 0x65, 0xee, 0x0d, 0xb3, 0xc2, 0x4c, 0xde, 0x17, 0x05, 0x49, 0xa9, 0xe3, 0x9e, 0x6f,
	0x9d, 0xa9, 0x3c, 0x15, 0x49, 0xa9, 0x06, 0x35, 0x13, 0x39, 0x33, 0xbb, 0x44, 0xec, 0xaa, 0x8c,
	0x34, 0x62, 0xef, 0x81, 0xc2, 0xfc, 0xcc, 0x15, 0x75, 0x3a, 0x7f, 0xb1, 0x59, 0xf0, 0x8b, 0xbf,
	0xd0, 0xd6, 0x73, 0x67, 0x05, 0xd0, 0x7b, 0x9e, 0x38, 0x96, 0x5a, 0xc0, 0x83, 0x3a, 0x85, 0x2d,
	0x18, 0x71, 0x73, 0x18, 0x03, 0xf6, 0xeb, 0x99, 0x3c, 0xb6, 0x9e, 0x5b, 0xbc, 0xfc, 0x9a, 0xb7,
	0x9d, 0xc8, 0x77, 0x87, 0xf5, 0x3a, 0xf6, 0x7b, 0xcd, 0x0f, 0xeb, 0xb1, 0xc6, 0x54, 0x55, 0x50,
	0x37, 0x2f, 0xe9, 0x87, 0x28, 0x1c, 0x45, 0xac, 0x95, 0xfd, 0x0a, 0x10, 0xea, 0x5f, 0x1e, 0x8b,
	0x60, 0x27, 0x98, 0x6b, 0x3a, 0x5d, 0xe6, 0x95, 0xeb, 0xdc, 0x03, 0x3d, 0xf3, 0x54, 0xf7, 0xa5,
	0x63, 0xde, 0x1a, 0x30, 0x5c, 0xd3, 0x49, 0x53, 0x9d, 0xe4, 0x21, 0x1e, 0x33, 0x43, 0x9d, 0xe6,
	0x98, 0xb9, 0x06, 0x0c, 0x17, 0x75, 0x5e, 0x64, 0xf2, 0x7a, 0xc4, 0x63, 0xee, 0xcc, 0xe4, 0x59,
	0xe6, 0x7e, 0x41, 0xa8, 0xa7, 0xf6, 0x0a, 0x07, 0xff, 0x52, 0x3e, 0x6f, 0x1a, 0xaa, 0x4b, 0x27,
	0x05, 0x63, 0x8d, 0x49, 0x61, 0xf3, 0x3b, 0xc0, 0xf4, 0x6a, 0x47, 0x25, 0xe3, 0x98, 0xd9, 0xe3,
	0xb0, 0x23, 0x3e, 0x24, 0x73, 0xca, 0xf8, 0xff, 0xe7, 0x7b, 0x6b, 0xf7, 0xbd, 0xe4, 0xde, 0x7b,
	0x90, 0xc6, 0x7c, 0x20, 0xfe, 0x33, 0xb7, 0xf3, 0x98, 0xfb, 0x4a, 0x4f, 0x13, 0x3e, 0x94, 0xf5,
	0x99, 0x1b, 0x2b, 0xe6, 0xbe, 0x30, 0xd3, 0x84, 0x0f, 0x55, 0x78, 0x8e, 0xc8, 0xb0, 0x9f, 0x25,
	0x7c, 0x20, 0x83, 0xf4, 0x88, 0x0f, 0xc5, 0x75, 0x1b, 0xe9, 0xf7, 0xea, 0xe3, 0x9f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x4d, 0x59, 0x88, 0x77, 0xbd, 0x04, 0x00, 0x00,
}
